// // 2. default parameter:

// function multiply(a, b = 5) {
//   let ans = a * b;
//   console.log(ans);
// }
// multiply(5);  //25
// multiply(5, 3);  //15
// multiply(5); // NaN
// multiply(5, 3); //15

// // 1. function declaration
// function sum(a, b) {
//   // a,b are argument of function sum
//   let ans = a + b;
//   console.log(ans);
// }
// // function call
// sum(5, 3); // 5, 3 is working as a parameters for function sum

// var a = 7;
// var b = 9;

// console.log(a + b);

// // .....
// // ......
// // ......1000

// var a = 7;
// var b = 9;

// console.log(a + b);

// //  ......200

// var a = 7;
// var b = 9;

// console.log(a + b);


// function termination: 1. return 2. executable part of function

// function multiple(a, b) {
//     let c = a * b;
//     console.log(c);
//     return c;
//     console.log("hi");
//     console.log("hi");
//     console.log("hi");
//   }
//   multiple(2, 3);




// 4. lexical scope: varibale decalared in outerfunction can be accessible by inner function but value assigned to inner function cannot be accessible by outer function:

// function outerFunc() {
//     let x = 5;
//     let y = 6;
//     // console.log(a);
  
//     function innerFunc() {
//       // let a = 10;   //This is not possible
//       console.log(x);
//     }
//     // console.log(a); //This is not possible
//     innerFunc();
//   }
//   outerFunc();
  
  // 3.block scope:
  // {
  //   let a = 50;
  //   const b = 30;
  //   var c = 20;
  //   //   console.log(a);
  // }
  
  // console.log(a);
  // console.log(b);
  // console.log(c);
  
  // // 2.functional scope: varibale declared inside a function can be accessed into a function only
  
  // let a = 30; //global scope
  // function myfun() {
  //   let a = 20;
  //   console.log(a);
  // }
  // myfun();
  // // console.log(a);
  
  // // 1.global scope: by default all variables has a functional scope means they can be accesssing throught the code base.
  
  // var globalVar1 = "GLobal Variable";
  // let globalVar2 = "GLobal Variable";
  // const globalVar3 = "GLobal Variable";
  
  // function myfunc() {
  //   console.log(globalVar1);
  //   console.log(globalVar2);
  //   console.log(globalVar3);
  // }
  // myfunc();
  // console.log(globalVar1);
  // console.log(globalVar2);
  // console.log(globalVar3);


  //foreach loop in array
  //arr.forEach(callBackFunction)
  //callbackfunction: here it is a function to execute for each elemet in a araay
  //*a callback is a function passed as an argument to another function
  //function abc(){
  //console.log("hello");
  //}
  //function myfunction(abc){
  //return abc;
  //}
  //let arr=[1,2,3,4,5];
  //arr.forEach(function printval(val,idx,arr){
  //
 // console.log(val,idx,arr);
//});





//higher order function or method
//a function that takes another function as an argument or returns a function as an output



//map
//create a new array with the result of some operation.the value is callback return are used to forn new array
//arr.map(callbackFnx(value,index,array))
//callbackFnx: function to be executed on each element of the array
//value: the current element being processed in the array
//index: the index of the current element being processed in the array
//array: the array the map method is being called upon
// let arr=[1,2,3,4,5];
// let newArr=arr.map(function printval(val,idx,arr){
//   return val*2;
// });
// console.log(newArr);



//filter
//create a new array with all elements that pass the test implemented by the provided function
//arr.filter(callbackFnx(value,index,array))
//callbackFnx: function to be executed on each element of the array
//value: the current element being processed in the array
//index: the index of the current element being processed in the array
//let arr=[1,2,3,4,5];
//let evenar=arr.filter(val)=>{
    // return val%2==0;
    //});
    //console.log(evenar);




    //reduce
    //applies a function against an accumulator and each element in the array (from left to right
    //to reduce it to a single value
    //arr.reduce(callbackFnx(accumulator,currentValue,index,array),initialValue)
    //callbackFnx: function to be executed on each element of the array
    //accumulator: the accumulated value which is to be updated with each element
    //currentValue: the current element being processed in the array
    //index: the index of the current element being processed in the array
    



